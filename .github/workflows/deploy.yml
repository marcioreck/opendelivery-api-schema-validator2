name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    # Cache for multiple package-lock.json files
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          backend/node_modules
          frontend/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-
        
    # Install all dependencies
    - name: Install all dependencies
      run: npm run install:all
        
    # Build Backend
    - name: Install backend dependencies
      run: echo "Dependencies already installed"
        
    - name: Build backend
      run: |
        cd backend
        npm run build
        
    - name: Test backend
      run: |
        cd backend
        npm test
        
    # Build Frontend
    - name: Install frontend dependencies
      run: echo "Dependencies already installed"
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test frontend
      run: |
        cd frontend
        npm run test
        
    # Prepare deployment files
    - name: Prepare deployment files
      run: |
        mkdir -p deployment/public/opendelivery-api-schema-validator2
        mkdir -p deployment/public/opendelivery-api-schema-validator2/api
        
        # Copy frontend build to main directory
        if [ -d "frontend/dist" ]; then
          cp -r frontend/dist/* deployment/public/opendelivery-api-schema-validator2/
        else
          echo "‚ùå Frontend dist directory not found!"
          exit 1
        fi
        [ -f "frontend/.htaccess" ] && cp frontend/.htaccess deployment/public/opendelivery-api-schema-validator2/
        
        # Copy backend build to /api subdirectory
        if [ -d "backend/dist" ]; then
          cp -r backend/dist/* deployment/public/opendelivery-api-schema-validator2/api/
        else
          echo "‚ùå Backend dist directory not found!"
          exit 1
        fi
        cp backend/package*.json deployment/public/opendelivery-api-schema-validator2/api/
        cp -r backend/schemas deployment/public/opendelivery-api-schema-validator2/api/
        cp backend/start-production.sh deployment/public/opendelivery-api-schema-validator2/api/
        [ -f "backend/.htaccess" ] && cp backend/.htaccess deployment/public/opendelivery-api-schema-validator2/api/
        cp install-deps.sh deployment/public/opendelivery-api-schema-validator2/api/
        
        # Create production config in API directory
        echo "NODE_ENV=production" > deployment/public/opendelivery-api-schema-validator2/api/.env.production
        echo "PORT=3001" >> deployment/public/opendelivery-api-schema-validator2/api/.env.production
        echo "FRONTEND_URL=https://fazmercado.com/opendelivery-api-schema-validator2" >> deployment/public/opendelivery-api-schema-validator2/api/.env.production
        echo "CORS_ORIGIN=https://fazmercado.com" >> deployment/public/opendelivery-api-schema-validator2/api/.env.production
        
        # Verify critical files
        echo "üìÅ Verifying deployment files..."
        ls -la deployment/public/opendelivery-api-schema-validator2/
        ls -la deployment/public/opendelivery-api-schema-validator2/api/
        [ -f "deployment/public/opendelivery-api-schema-validator2/api/index.js" ] && echo "‚úÖ index.js found" || echo "‚ùå index.js NOT found"
        
        # Create deployment info
        echo "$(date): Deployed from commit ${{ github.sha }}" > deployment/public/opendelivery-api-schema-validator2/deploy-info.txt
        
    # Debug deployment package
    - name: Debug deployment package
      run: |
        echo "üîç Debug: Conte√∫do do pacote de deployment"
        echo "üìÅ Aplica√ß√£o completa:"
        ls -la deployment/public/opendelivery-api-schema-validator2/ | head -10
        echo "üìÅ API Backend:"
        ls -la deployment/public/opendelivery-api-schema-validator2/api/
        echo "üìã Verifica√ß√µes:"
        [ -f "deployment/public/opendelivery-api-schema-validator2/api/index.js" ] && echo "‚úÖ index.js presente" || echo "‚ùå index.js AUSENTE"
        [ -f "deployment/public/opendelivery-api-schema-validator2/api/package.json" ] && echo "‚úÖ package.json presente" || echo "‚ùå package.json AUSENTE"
        [ -f "deployment/public/opendelivery-api-schema-validator2/api/start-production.sh" ] && echo "‚úÖ start-production.sh presente" || echo "‚ùå start-production.sh AUSENTE"
        [ -f "deployment/public/opendelivery-api-schema-validator2/index.html" ] && echo "‚úÖ Frontend index.html presente" || echo "‚ùå Frontend index.html AUSENTE"
        
    # Setup SSH
    - name: Setup SSH
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
    # Deploy Frontend via rsync
    - name: Deploy Complete Application
      if: github.ref == 'refs/heads/main'
      run: |
        rsync -avz --delete \
          --exclude='*.map' \
          --exclude='*.md' \
          --exclude='.git*' \
          deployment/public/opendelivery-api-schema-validator2/ \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.TARGET_DIR }}/
        
    # Install production dependencies on server
    - name: Install Backend Dependencies
      if: github.ref == 'refs/heads/main'
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "cd ${{ secrets.TARGET_DIR }}/api && \
           chmod +x install-deps.sh && \
           ./install-deps.sh"
        
    # Restart backend service
    - name: Restart Backend Service
      if: github.ref == 'refs/heads/main'
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "export TERM=xterm && \
           export PATH=\$PATH:/usr/local/bin:/usr/bin:/home/\$USER/.nvm/versions/node/*/bin && \
           cd ${{ secrets.TARGET_DIR }}/api && \
           chmod +x start-production.sh && \
           ./start-production.sh"
        
    # Cleanup SSH
    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa
        
    # Notify deployment
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
          echo "Frontend: https://fazmercado.com/opendelivery-api-schema-validator2/"
          echo "Backend API: https://fazmercado.com/opendelivery-api-schema-validator2/api/"
        else
          echo "‚ùå Deployment failed!"
        fi
