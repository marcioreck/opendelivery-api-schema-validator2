#!/bin/bash

# Script de Deploy para OpenDelivery API Schema Validator 2
# Uso: ./deploy-production.sh

set -e

echo "üöÄ Iniciando deploy do OpenDelivery API Schema Validator 2..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configura√ß√µes
FRONTEND_DIR="frontend"
DIST_DIR="frontend/dist"
DEPLOY_DIR="/var/www/html/public/opendelivery-api-schema-validator2"
BACKUP_DIR="/var/www/html/public/opendelivery-api-schema-validator2.backup"

# Fun√ß√£o para mostrar erros
error_exit() {
    echo -e "${RED}‚ùå Erro: $1${NC}" >&2
    exit 1
}

# Fun√ß√£o para mostrar sucesso
success_msg() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fun√ß√£o para mostrar warning
warning_msg() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Verificar se est√° na raiz do projeto
if [ ! -f "package.json" ] || [ ! -d "$FRONTEND_DIR" ]; then
    error_exit "Execute este script na raiz do projeto OpenDelivery API Schema Validator 2"
fi

# Verificar se npm est√° instalado
if ! command -v npm &> /dev/null; then
    error_exit "npm n√£o est√° instalado"
fi

# Limpar e instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
cd $FRONTEND_DIR
npm install || error_exit "Falha ao instalar depend√™ncias"

# Fazer build de produ√ß√£o
echo "üî® Fazendo build de produ√ß√£o..."
npm run build || error_exit "Falha no build de produ√ß√£o"

# Voltar para a raiz
cd ..

# Verificar se o build foi criado
if [ ! -d "$DIST_DIR" ]; then
    error_exit "Diret√≥rio de build n√£o encontrado: $DIST_DIR"
fi

# Verificar se os assets foram criados
if [ ! -d "$DIST_DIR/assets" ]; then
    error_exit "Diret√≥rio de assets n√£o encontrado: $DIST_DIR/assets"
fi

# Contar arquivos de assets
ASSET_COUNT=$(ls -1 "$DIST_DIR/assets"/*.js "$DIST_DIR/assets"/*.css 2>/dev/null | wc -l)
if [ $ASSET_COUNT -lt 3 ]; then
    error_exit "Assets insuficientes gerados (encontrados: $ASSET_COUNT, esperados: pelo menos 3)"
fi

success_msg "Build de produ√ß√£o criado com sucesso"

# Fazer backup se o diret√≥rio existir
if [ -d "$DEPLOY_DIR" ]; then
    echo "üìÅ Fazendo backup do deploy anterior..."
    if [ -d "$BACKUP_DIR" ]; then
        rm -rf "$BACKUP_DIR"
    fi
    mv "$DEPLOY_DIR" "$BACKUP_DIR" || warning_msg "N√£o foi poss√≠vel fazer backup"
    success_msg "Backup criado em: $BACKUP_DIR"
fi

# Criar diret√≥rio de deploy
echo "üìÇ Criando diret√≥rio de deploy..."
mkdir -p "$DEPLOY_DIR" || error_exit "N√£o foi poss√≠vel criar diret√≥rio de deploy"

# Copiar arquivos
echo "üìã Copiando arquivos para produ√ß√£o..."
cp -r "$DIST_DIR"/* "$DEPLOY_DIR"/ || error_exit "Falha ao copiar arquivos"

# Verificar se o .htaccess foi copiado
if [ ! -f "$DEPLOY_DIR/.htaccess" ]; then
    error_exit "Arquivo .htaccess n√£o encontrado no deploy"
fi

# Verificar se o index.html foi copiado
if [ ! -f "$DEPLOY_DIR/index.html" ]; then
    error_exit "Arquivo index.html n√£o encontrado no deploy"
fi

# Verificar se os assets foram copiados
if [ ! -d "$DEPLOY_DIR/assets" ]; then
    error_exit "Diret√≥rio assets n√£o encontrado no deploy"
fi

# Ajustar permiss√µes
echo "üîê Ajustando permiss√µes..."
chmod -R 755 "$DEPLOY_DIR" || warning_msg "N√£o foi poss√≠vel ajustar permiss√µes"

# Verificar se o deploy est√° funcionando
echo "üß™ Verificando deploy..."
ASSETS_DEPLOYED=$(ls -1 "$DEPLOY_DIR/assets"/*.js "$DEPLOY_DIR/assets"/*.css 2>/dev/null | wc -l)
if [ $ASSETS_DEPLOYED -ne $ASSET_COUNT ]; then
    error_exit "Nem todos os assets foram copiados corretamente"
fi

success_msg "Deploy conclu√≠do com sucesso!"

# Mostrar informa√ß√µes do deploy
echo ""
echo "üìä Informa√ß√µes do Deploy:"
echo "   üìÅ Diret√≥rio: $DEPLOY_DIR"
echo "   üìÅ Backup: $BACKUP_DIR"
echo "   üì¶ Assets copiados: $ASSETS_DEPLOYED"
echo "   üåê Rota Laravel: https://fazmercado.com/opendelivery-api-schema-validator2"
echo "   üåê Acesso direto: https://fazmercado.com/public/opendelivery-api-schema-validator2/"
echo ""

# Mostrar pr√≥ximos passos
echo "üîç Pr√≥ximos passos:"
echo "1. Acesse https://fazmercado.com/opendelivery-api-schema-validator2 (rota Laravel)"
echo "2. Ou acesse diretamente https://fazmercado.com/public/opendelivery-api-schema-validator2/"
echo "3. Verifique se n√£o h√° erros 404 nos assets"
echo "4. Teste todas as funcionalidades"
echo "5. Monitore os logs do servidor web"
echo ""

# Teste opcional de conectividade
if command -v curl &> /dev/null; then
    echo "üåê Testando conectividade..."
    
    # Teste da rota Laravel (deve ser 302 redirect)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://fazmercado.com/opendelivery-api-schema-validator2" || echo "000")
    if [ "$HTTP_CODE" = "302" ]; then
        success_msg "Rota Laravel est√° redirecionando corretamente (HTTP 302)"
    else
        warning_msg "Rota Laravel retornou c√≥digo HTTP: $HTTP_CODE"
    fi
    
    # Teste do acesso direto (deve ser 200)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://fazmercado.com/public/opendelivery-api-schema-validator2/" || echo "000")
    if [ "$HTTP_CODE" = "200" ]; then
        success_msg "Aplica√ß√£o est√° respondendo diretamente (HTTP 200)"
    else
        warning_msg "Acesso direto retornou c√≥digo HTTP: $HTTP_CODE"
    fi
fi

echo ""
success_msg "Deploy do OpenDelivery API Schema Validator 2 finalizado! üéâ"
